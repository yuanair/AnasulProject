//
// Created by admin on 2024/8/22.
//

#include <Anasul/Windows/Windows.hpp>
#include <Anasul/GLFW/GLFWWindow.hpp>
#include "WindowsWindow.hpp"

namespace Anasul
{
	
	void Platform::GetPlatformName(StringA &name)
	{
		name = "Windows";
	}
	
	void Platform::GetPlatformName(StringW &name)
	{
		name = L"Windows";
	}
	
	boolean Platform::IsDarkMode()
	{
		u32 value;
		OnlyInWindows::ReadFromRegedit(
			OnlyInWindows::KeyCurrentUser, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
			L"AppsUseLightTheme",
			value
		);
		return value == 0;
	}
	
	boolean Platform::IsLightMode()
	{
		u32 value;
		OnlyInWindows::ReadFromRegedit(
			OnlyInWindows::KeyCurrentUser, L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
			L"AppsUseLightTheme",
			value
		);
		return value == 1;
	}
	
	boolean Platform::IsUserAnAdmin()
	{
		return ::IsUserAnAdmin();
	}
	
	void Platform::GetCommandLine(StringA &commandLine)
	{
		commandLine = ::GetCommandLineA();
	}
	
	void Platform::GetCommandLine(StringW &commandLine)
	{
		commandLine = ::GetCommandLineW();
	}
	
	Window *Platform::DesktopWindow(Logger &logger)
	{
		auto *window = new WindowsWindow(logger);
		window->SetHWnd(::GetDesktopWindow());
		return window;
	}
	
	Window *Platform::FindWindow(Logger &logger, StringViewA title)
	{
		auto *window = new WindowsWindow(logger);
		window->SetHWnd(::FindWindowA(nullptr, title.data()));
		return window;
	}
	
	
	Window *Platform::FindWindow(Logger &logger, StringViewW title)
	{
		auto *window = new WindowsWindow(logger);
		window->SetHWnd(::FindWindowW(nullptr, title.data()));
		return window;
	}
	
	boolean Platform::OnlyInWindows::ReadFromRegedit(Key hKey, StringViewW subKey, StringViewW subKeyValue, u32 &value)
	{
		// HKEY openKey;
		DWORD valueSize;
		// if (::RegOpenKeyExW((HKEY) hKey, subKey.data(), 0, KEY_READ, &openKey) != ERROR_SUCCESS) return false;
		if (::RegGetValueW((HKEY) hKey, subKey.data(), subKeyValue.data(), RRF_RT_REG_DWORD, nullptr, &value, &valueSize
		) !=
		    ERROR_SUCCESS)
			return false;
		//::RegCloseKey((HKEY) openKey);
		return true;
	}
	
	boolean
	Platform::OnlyInWindows::ReadFromRegedit(Key hKey, StringViewW subKey, StringViewW subKeyValue, StringW &value)
	{
		DWORD valueSize;
		if (::RegGetValueW((HKEY) hKey, subKey.data(), subKeyValue.data(), RRF_RT_REG_SZ, nullptr, nullptr, &valueSize
		) !=
		    ERROR_SUCCESS)
			return false;
		value.resize(valueSize / sizeof(StringViewW::value_type) - 2);
		if (::RegGetValueW((HKEY) hKey, subKey.data(), subKeyValue.data(), RRF_RT_REG_SZ, nullptr, &value[0], &valueSize
		) !=
		    ERROR_SUCCESS)
			return false;
		return true;
	}
	
	boolean
	Platform::OnlyInWindows::WriteToRegedit(Key hKey, StringViewW subKey, StringViewW subKeyValue, StringViewW value)
	{
		HKEY createKey;
		if (::RegCreateKeyExW(
			(HKEY) hKey,
			subKey.data(),
			0,
			nullptr,
			REG_OPTION_NON_VOLATILE,
			KEY_WRITE,
			nullptr,
			&createKey,
			nullptr
		) != ERROR_SUCCESS)
			return false;
		//
		if (::RegSetValueExW(
			createKey,
			subKeyValue.data(),
			0,
			REG_SZ,
			reinterpret_cast<LPBYTE>(const_cast<cwide *>(value.data())),
			sizeof(StringViewW::value_type) * (value.size() + 1)) != ERROR_SUCCESS)
			return false;
		::RegCloseKey(createKey);
		return true;
	}
	
	boolean Platform::OnlyInWindows::DeleteKeyInRegedit(Key hKey, StringViewW subKey)
	{
		return ::RegDeleteKeyExW((HKEY) hKey, subKey.data(), 0, 0) == ERROR_SUCCESS;
	}
	
	boolean Platform::OnlyInWindows::DeleteKeyValueInRegedit(Key hKey, StringViewW subKey, StringViewW subKeyValue)
	{
		return ::RegDeleteKeyValueW((HKEY) hKey, subKey.data(), subKeyValue.data()) == ERROR_SUCCESS;
	}
	
	boolean Platform::OnlyInWindows::SetBootStartUp(StringViewW key, StringViewW command)
	{
		return WriteToRegedit(KeyCurrentUser, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", key, command);
	}
	
	boolean Platform::OnlyInWindows::GetBootStartUp(StringViewW key, StringW &command)
	{
		return ReadFromRegedit(KeyCurrentUser, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", key, command);
	}
	
	boolean Platform::OnlyInWindows::DeleteBootStartUp(StringViewW key)
	{
		return DeleteKeyValueInRegedit(KeyCurrentUser, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", key);
	}
	
	Window *Platform::OnlyInWindows::FindWindowFromClass(Logger &logger, StringViewA name)
	{
		auto *window = new WindowsWindow(logger);
		window->SetHWnd(::FindWindowA(name.data(), nullptr));
		return window;
	}
	
	Window *Platform::OnlyInWindows::FindWindowFromClass(Logger &logger, StringViewW name)
	{
		auto *window = new WindowsWindow(logger);
		window->SetHWnd(::FindWindowW(name.data(), nullptr));
		return window;
	}
	
	
	void *Platform::OnlyInWindows::GetHWnd(const Window *window)
	{
		if (auto *pWindowsWindow = dynamic_cast<const WindowsWindow *>(window))
		{
			return pWindowsWindow->GetHWnd();
		}
		else if (auto *pGLFWWindow = dynamic_cast<const GLFWWindow *>(window))
		{
			return pGLFWWindow->GetHWnd();
		}
		else
		{
			return nullptr;
		}
	}
	
	void Platform::OnlyInWindows::SetParent(Window *child, Window *parent)
	{
		::SetParent((HWND) GetHWnd(child), (HWND) GetHWnd(parent));
	}
	
	void Platform::OnlyInWindows::SetParentToDesktop(Anasul::Window *child)
	{
		::SetParent((HWND) GetHWnd(child), ::FindWindowA("Progman", nullptr));
		Anasul::Platform::OnlyInWindows::EnumWindowHide();
	}
	
	BOOL CALLBACK EnumWinProc(HWND hwnd, LPARAM lParam)
	{
		HWND hDefView = ::FindWindowEx(hwnd, 0, L"SHELLDLL_DefView", 0);
		if (hDefView != 0)
		{
			HWND hWorkerw = ::FindWindowEx(0, hwnd, L"WorkerW", 0);
			::ShowWindow(hWorkerw, SW_HIDE);
			return FALSE;
		}
		return TRUE;
	}
	
	void Platform::OnlyInWindows::EnumWindowHide()
	{
		::EnumWindows(EnumWinProc, 0);
	}
	
	void Platform::OnlyInWindows::SendMessage(Window *window, u32 message, u32 wParam, u32 lParam)
	{
		::SendMessageW((HWND) GetHWnd(window), message, wParam, lParam);
	}
	
} // Anasul
